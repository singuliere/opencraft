# -*- coding: utf-8 -*-
# Generated by Django 1.10.7 on 2019-02-27 15:34
from __future__ import unicode_literals

from django.db import migrations, models, transaction


def forwards_func(apps, schema_editor):
    """
    Fills configuration_playbook_name according to the openedx_release
    """
    # Redefine function here, because if gets deleted in the future this migration
    # would fail  otherwise
    def get_base_playbook_name(openedx_release):
        old_playbook_releases = [
            'ginkgo',
            'hawthorn',
        ]
        if any([release_name in openedx_release for release_name in old_playbook_releases]):
            return 'playbooks/edx_sandbox.yml'
        return 'playbooks/openedx_native.yml'

    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    OpenEdXInstance = apps.get_model("instance", "OpenEdXInstance")
    db_alias = schema_editor.connection.alias
    # We only need to update the OpenEdXInstance, because these AppServer
    # should be immutable, and new AppServers will use the correct values from
    # OpenEdXInstance model
    queryset = OpenEdXInstance.objects.all()
    # Make all saves() in a single transaction
    with transaction.atomic():
        for item in queryset:
            item.configuration_playbook_name = get_base_playbook_name(item.openedx_release)
            item.save()

def backwards_func(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('instance', '0113_openedxinstance_enable_prefix_domains_redirect'),
    ]

    operations = [
        migrations.AddField(
            model_name='openedxappserver',
            name='configuration_playbook_name',
            field=models.CharField(blank=True, max_length=100),
        ),
        migrations.AddField(
            model_name='openedxinstance',
            name='configuration_playbook_name',
            field=models.CharField(blank=True, max_length=100),
        ),
        migrations.RunPython(forwards_func, backwards_func),
    ]
